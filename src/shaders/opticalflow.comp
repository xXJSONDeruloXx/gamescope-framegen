#version 450

// Ported from FidelityFX SDK optical flow advanced pass v5
// Minimal version for gamescope motion estimation

layout (binding = 0) uniform sampler2D currentFrame;
layout (binding = 1) uniform sampler2D previousFrame;
layout (binding = 2, rgba32f) writeonly uniform image2D motionVectors;

layout(push_constant) uniform PushConstants {
    ivec2 imageSize;
    int blockSize;
    float searchRadius;
} pc;

// --- Begin inlined logic from ffx_opticalflow_compute_optical_flow_v5.h ---
// For brevity, this is a placeholder for the actual block matching logic.
// Replace with the full implementation as needed.

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= pc.imageSize.x || gid.y >= pc.imageSize.y)
        return;

    // Simple block matching placeholder: search in a window for best match
    float minError = 1e20;
    ivec2 bestOffset = ivec2(0);
    vec3 curr = texelFetch(currentFrame, gid, 0).rgb;
    for (int dy = -int(pc.searchRadius); dy <= int(pc.searchRadius); ++dy) {
        for (int dx = -int(pc.searchRadius); dx <= int(pc.searchRadius); ++dx) {
            ivec2 offset = gid + ivec2(dx, dy);
            if (offset.x < 0 || offset.y < 0 || offset.x >= pc.imageSize.x || offset.y >= pc.imageSize.y)
                continue;
            vec3 prev = texelFetch(previousFrame, offset, 0).rgb;
            float error = length(curr - prev);
            if (error < minError) {
                minError = error;
                bestOffset = ivec2(dx, dy);
            }
        }
    }
    // Output motion vector as (dx, dy, 0, 1)
    imageStore(motionVectors, gid, vec4(bestOffset, 0, 1));
}
// --- End inlined logic ---
